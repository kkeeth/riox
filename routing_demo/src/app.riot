<app>
  <div class="container">
    <h3>Gadget Browser <a href="https://github.com/kkeeth/riox">(GitHub)</a></h3>
    <p>Notice the URL routing, back button works as expected.</p>

    <!-- for 404 -->
    <div if={ state.showNotFound } class="row">
      <div>
        <not-found />
      </div>
    </div>

    <div if={ !state.edit }>
      <!-- for Item List -->
      <div if={ !state.showNotFound } class="row">
        <div>
          <item-list edit={ state.edit } />
        </div>
      </div>

      <!-- for Item Detail -->
      <item-detail if={ !!state.detail } item={ state.detail } />
      <div if={ !state.detail }>
        <p>Choose a product.</p>
      </div>

      <!-- add button -->
      <div>
        <button onclick={ add }>Add</button>
      </div>
    </div>
    <div if={ state.edit }>
      <add-item add-item={ addItem } cancel={ cancel } />
    </div>
  </div>

  <script>
    import {
      route,
      router,
      toRegexp,
      match,
      setBase,
      initDomListeners,
    } from '@riotjs/route'
    import lazy from '@riotjs/lazy'
    import RiotControl from 'riotcontrol'
    import Loader from './components/loader.riot'
    import NotFound from './pages/not-found.riot'
    import pages from './pages'
    import ItemStore from './libs/itemstore'

    export default {
      components: {
        pages,
        // Route,
        // Router,
        NotFound,
        ItemList: lazy(Loader, () => import(
          /* webpackPrefetch: true, webpackChunkName: 'pages/item-app' */
          './pages/item-list.riot'
        )),
        ItemDetail: lazy(Loader, () => import(
          /* webpackPrefetch: true, webpackChunkName: 'pages/item-app' */
          './pages/item-detail.riot'
        )),
        AddItem: lazy(Loader, () => import(
          /* webpackPrefetch: true, webpackChunkName: 'pages/add-item' */
          './pages/add-item.riot'
        )),
      },
      state: {
        pages,
        showNotFound: false,
        detail: null,
        activePage: null,
        edit: false,
      },
      onBeforeMount({ isServer }) {
        setBase(`${window.location.protocol}//${window.location.host}`)
        initDomListeners(document.querySelector('#root'))

        const itemStore = new ItemStore()
        RiotControl.addStore(itemStore)

        // create a stream on all routes to catch the not-found page
        this.anyRouteStream = route('(.*)')
        this.anyRouteStream.on.value(this.onAnyRoute)

        RiotControl.on('item_detail_changed', (item) => {
          this.update({
            edit: false,
            detail: item
          })
        })
      },
      onAnyRoute(path) {
        // show the not found page if none of the page paths are matched
        const activePage = pages.find(p => match(path.params[0], toRegexp(p.path)))
        const detailId = path.params[0].split('/').pop()
        if (activePage.label === "ItemDetail") RiotControl.trigger('route_item', detailId)

        this.update({
          activePage,
          showNotFound: !activePage,
          edit: activePage.label === 'AddItem',
        })
      },
      onBeforeUnmount() {
        this.anyRouteStream.end()
      },
      add() {
        router.push('/#add')
      },
      addItem(item) {
        RiotControl.trigger('item_detail_add', item)
        router.push('')
      },
      cancel() {
        RiotControl.trigger('route_item', null)
        router.push('')
      },
    }
  </script>
</app>
