<todo>
  <h3>Riox ToDo Demo</h3>
	<span>A Simplistic Central Event Controller / Dispatcher For RiotJS, Inspired By Flux</span>
  <hr />

  <h3>{ props.title }</h3>
  <ul>
    <li each={ item in state.items }>
      <label class={ item.done && 'completed' }>
        <input
          type="checkbox"
          checked={ item.done }
          onclick={ () => toggle(item) }> { item.title }
      </label>
    </li>
  </ul>

  <form onsubmit={ add }>
    <input name="input" onkeyup={ edit }>
    <button disabled={ !state.text }>Add #{ state.items.length + 1 }</button>
  </form>
  <button disabled={ !state.items.length } onclick={ remove } class="danger">Remove</button>

  <script>
    import TodoStore from '../../libs/todostore'
    import riox from '../../libs/riox'

    export default {
      state: {
        disabled: true,
        items: [],
        text: ""
      },
      onBeforeMount(props, state) {
        // Create store instance
        const todoStore = new TodoStore()
        // Register the store in central dispatch.
        riox.addStore(todoStore)
        // Register a listener for store change events.
        riox.on('todos_changed', (items) => {
          this.update({
            items: items
          })
        })
      },
      onMounted() {
        // Trigger init event when component is mounted to page.
        // Any store could respond to this.
        riox.trigger('todo_init')
      },
      edit(e) {
        this.update({
          text: e.target.value
        })
      },
      add(e) {
        if (this.state.text) {
          e.preventDefault()

          // Trigger event to all stores registered in central dispatch.
          // This allows loosely coupled stores/components to react to same events.
          e.target.input.value = ''
          riox.trigger('todo_add', this.state.text)
          this.update({
            text: ''
          })
        }
      },
      toggle(e) {
        e.done = !e.done
        this.update()
      },
      remove(e) {
        riox.trigger('todo_remove')
      }
    }
  </script>
</todo>
